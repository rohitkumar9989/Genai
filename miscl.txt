Extract and provide the result in the following:
            S.no: [primry column name]: [Its relation with other columns excluding primary column]== [Type Visualization that you think suits well(Only 1)]

            I want all the columns to be covered as primary columns, i just need the output in the format i gave,
            I donot need any other explanation or extra text

<template>
                [primary_column_name]: ["its relationship columns wrt primary_column_name] == [visualization Type]
            </template>

"system","""
            You are a data analyst who needs to analyze columns and their relationships to determine the most effective visualization technique
            in the given context
            <context>
            {context}
            </context>"""),
            ("user", """
            
            The output should be a tabular form of visualization technique as shown below. 
            Strictly follow it and I donot need anything else.
            | S.No | Name of Visualization | Columns w.r.t. other columns | 
            |------|------------------------|-------------------------------| 
            """),
            ("system", """
            Ok ill be providing the visualization in the table format as below
             | S.No | Name of Visualization | Columns w.r.t. other columns | 
            |------|------------------------|-------------------------------| 
            """

strictly generate me an .xml file by using the following xml template only, maintain the same elements. 
            Make sure that youd wrap the whole xml code inside the ``` ``` tag as i would easily identify the code and do
            further scraping

<serial_no id="[S.No]">
    <Visualization_used>
        <columns>
            <Column_Name>Column Name</Column_Name>
            <Data_Type>Data Type</Data_Type>
        </columns>
        <Type_of_Visualization></Type_of_Visualization>
        <Description></Description>
    </Visualization_used>
</serial_no>

You are a xml file generator who needs to analyze columns and their relationships to determine the most effective visualization technique
            in the given context.
            <context>
            {context}
            </context>
            
            You are job is as an Placeholder filler in the given xml template, where you need to analyze the elements,
            and fill the results respectively, and finally generate me a xml file. (NO EXPLANATION NEEDED, STRICTLY FOLLOW THE TEMPLATE, NO ANY OTHER LANGUAGE REQUIRED TO BE USED TO FILL !!!!!)
            xml template:
            <serial_no id="[S.No]"
                   <Visualization_used>
                       <columns>"Column name wrt other columns to whom this visulization has to be done" </columns>
                       <Type of Visualization> </Type of Visualization>
                       <Description> </Description>
                   </Visualization_used>
            </serial_no>

        Fill the TABLE with suggested visualization techniques based on the context.
        Ensure the TABLE includes exactly five columns: "S.No", "Name of Visualization", "X-Axis Columns", "Y-Axis Columns", and a repeated "S.No" column.

"""
        Prompt Template:

        You are a data analyst tasked with identifying appropriate visualization techniques based on the relationships between columns in the provided context.

        <context>
        {context}
        </context>

        Generate a table in the following structure:

        S.No	Name of Visualization	X-Axis Columns	Y-Axis Columns	S.No
        Rules:

        Fill the table with suggested visualization techniques based on the context.
        Ensure the table includes exactly five columns: "S.No", "Name of Visualization", "X-Axis Columns", "Y-Axis Columns", and a repeated "S.No" column.
        Output only the table in the exact format above, without any explanations or additional text.





        """


("system","You are a data analyst tasked with identifying appropriate visualization techniques based on the relationships between columns in the provided data. No other explanation is needed to provide."),
            ("user", "Now generate a table having columns: S.No	,Name of Visualization,X-Axis Columns, Y-Axis Columns,S.No"),
            ("assistant", "S.No	| Name of Visualization | X-Axis Columns | Y-Axis Columns | S.No \n ------|------------------------|-------------|------------|-----"),
            ("user", "The data is: {context}\n understand the multi relation between the columns and generate,an table having columns: S.No	Name of Visualization	X-Axis Columns	Y-Axis Columns	S.No strictly follow the table!!"),
            ("assistant", f"S.No	| Name of Visualization | X-Axis Columns | Y-Axis Columns | Same S.No \n {sample_prompt}")
def create_primary_prompt(dictionary):
            key=list(dictionary.keys())
            return f"1 | Bar Chart | {key[0]} | {key[1]} | 1"

viz_=[]
        temp_string=self.string
        for index in range (1,50):
            try:
                pattern=rf"(\d)(.*?)(\d)"
                match_=re.search(pattern, temp_string)
                viz_.append(match_.group())
                temp_string=temp_string[len(match_.group()):]
            except Exception as e:
                break

        return viz_
for i in range(index, 10):
            try:
                pattern = rf"<serial_no id=\d>(.*?)</serial_no>"
                match = re.search(pattern, self.string, re.DOTALL)  
                if match:
                    row = match.group(1)  
                    viz_type_pattern = r"<Type of Visualization>(.*?)</Type of Visualization>"
                    xaxis_pattern = r"<xaxis>(.*?)</xaxis>"
                    yaxis_pattern = r"<yaxis>(.*?)</yaxis>"
                    viz_type_match = re.search(viz_type_pattern, row)
                    xaxis_match = re.search(xaxis_pattern, row)
                    yaxis_match = re.search(yaxis_pattern, row) 
                    if viz_type_match and xaxis_match and yaxis_match:
                        viz_type = viz_type_match.group(1).strip()
                        xaxis = xaxis_match.group(1).strip()
                        yaxis = yaxis_match.group(1).strip()
                        
                        viz_dict[i] = {"Type": viz_type, "X-Axis": xaxis, "Y-Axis": yaxis}
            except Exception as e:
                print(f"Error processing serial_no id={i}: {e}")
                continue
        return viz_dict


data_df = pd.DataFrame({xaxis: xaxis_values, yaxis: yaxis_values})
aggregated_data = data_df.groupby(xaxis).sum().reset_index()
xaxis_values = aggregated_data[xaxis]
yaxis_values = aggregated_data[yaxis]


data_df = pd.DataFrame({xaxis: xaxis_values, yaxis: yaxis_values})
                        aggregated_data = data_df.groupby(xaxis).sum().reset_index()
                        xaxis_values = aggregated_data[xaxis]
                        yaxis_values = aggregated_data[yaxis]
                        fig, ax = plt.subplots(figsize=(15, 8))
                        sns.lineplot(x=xaxis_values, y=yaxis_values, marker="o", ax=ax)
                        ax.set_title("Line Chart")
                        ax.set_xlabel(xaxis)
                        ax.set_ylabel(yaxis)
                        plt.xticks(rotation=90)
                        st.pyplot(fig)
"""You are a Question answering bot who takes the dataset as refernce to extract information.
            <question>
            {query}.
            </question>
            This is the dataset for your reference is <dataset>{dataframe}</dataset>. ****Provide me a detailed summary paragraph about 80-100 words clear and concise, as if explaining to layman****  ***no code needed!!***
            enclose the explanation within the <explanation><explanation>tag
            """
class Generate_relations:
    def __init__ (self, llm_model, dataset_name):
        self.llm_model=llm_model
        self.dataset_name=dataset_name
        self.prompt=ChatPromptTemplate.from_messages([
            ("system", """You are provided with a data i want you to dynamically place them in xaxis and yaxis placeholders in the following xml format:\n
                        <1>
                            <xaxis> </xaxis>
                            <yaxis> </yaxis>
                        </1>\n
                        These place holders must have xaxis columns and yaxis columns which are present in the text data that i provide.
                        """),
            ("user", """Here is the text data: <data> {context}</data>
             I want you to strictky follow this format for the output:<1>
                            <xaxis> </xaxis>
                            <yaxis> </yaxis>
                        </1>\n """),
            ("assistant", """
                        <?xml version="1.0" encoding="UTF-8"?>\n <root>
                        """)
        ])
        self.agent=create_csv_agent(self.llm_model, self.dataset_name, verbose=True, allow_dangerous_code=True)
    def create_relations(self):
        #Creates the relations between the values in the datset
        relations=self.agent.run("Generate the columns relation, generate around max 15 such relation nad minimum as 5")
        relation_output=output_parser.invoke(relations)

        chain=self.prompt | self.llm_model
        llm_otp=chain.invoke({"context": relation_output})
        return output_parser.invoke(llm_otp)


        #return chain.invoke("Generate the columns relation, generate around max 15 such relation nad minimum as 7")
